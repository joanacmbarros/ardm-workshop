---
title: "Exercise 3: Testing the model's interoperability"
subtitle: "I hope you like rollercosters"
title-block-banner: "#1D466C"
format:
  html:
    self-contained: true
    toc: true
    toc-location: left
    citations-hover: true
    code-copy: true
    code-fold: show
    code-block-bg: true
    code-overflow: wrap
    highlight-style: github
    theme: ../custom.scss
---

```{r}
#| label: load packages
#| message: false
#| echo: false
#| warning: false

library(tidyverse)
library(ggalt)
library(here)
library(haven)
```

## Scenario

Imagine the same person from exercise 2 comes back with a new finding and a new request:

> I have the SAS results from the survival analysis you had to do before! Please, plot these results and compare to your previous KM plots to confirm whether the results match.

To ensure these results are not lost and to test the robustness of our model, we will add the SAS results to our tables. Then, we can apply the same code from exercise 1 to recreate the Kaplan-Meier plot.

## Explore the data

First, let's explore the analysis results datasets and determine if we can map it, as-is, to the data model. In this case, we were given a dataset with analysis results.

```{r}
#| label: explore-data

sas_data <- read_sas(here("data", "survival_ard.sas7bdat"))

glimpse(sas_data)
```

Hmm, I'm not sure what these variables mean. Luckily, the [SAS documentation](https://documentation.sas.com/doc/en/statug/15.2/statug_lifetest_toc.htm) is freely available. There also seems to be a mismatch in the column names (and case) although they refer to the same variable (i.e., TRTP and Stratum). We have to take some educated guesses.

![](images/sas-proc-lifetest.png){fig-align="center"}

Now, we can check our data model and verify if we have all the information needed to fill the `survival_ard` table.

![](images/data_model.png){fig-align="center" width="205"}

### Fill the `survival_ard` table

Unfortunately, this dataset does not contain information on the number at risk and number of events. However, we can fill the `survival_ard` table with the available information. Next, we can fill the `analyses_metadata` table.

```{r}
#| label: fill-survival-ard
#| eval: true
survival_ard <- readRDS(file = here("data", "survival_ard.rds"))

widen_survival_ard <- survival_ard |>
  pivot_wider(names_from = "name",
              values_from = "value",
              values_fn = list) |>
  unnest(cols = everything())

sas_ard <- sas_data |>
  mutate(description = "sas survival 01",
         id = "ARD02") |>
  rename(
    strata = TRTP,
    time = AVAL,
    n_censor = `_CENSOR_`,
    estimate = SURVIVAL,
    std_error = SDF_STDERR,
    ci_lower = SDF_LCL,
    ci_upper = SDF_UCL
  )  |>
  mutate(n_risk = NA,
         n_event = NA) |> 
  select(-STRATUM) |>
  pivot_longer(cols = !c("description", "id", "strata"), 
               names_to = "name", 
               values_to = "value") |>
  select(names(survival_ard))


new_survival_ard <- rbind(survival_ard, sas_ard)
saveRDS(new_survival_ard, file = here("data", "survival_ard.rds"))
```

### Fill the `analyses_metadata` table

This one is more tricky since we do not have much information in the datasets provided. All we know is the name of the procedure and the software used. As `output_id` we will use the same as in exercise 1 and 2.

```{r}
#| label: fill-analyses-metadata
#| eval: true
analyses_metadata <- readRDS(file = here("data", "analyses_metadata.rds"))

sas_analyses <- tibble(
  description = "sas survival analysis 01",
  id = "A02",
  software = "SAS",
  software_version = NA,
  libraries = NA,
  function_call = "proc lifetest",
  ard_id = "ARD02",
  output_id = "OUT01"
)

new_analyses_metadata <- rbind(analyses_metadata, sas_analyses)
saveRDS(new_analyses_metadata, file = here("data", "analyses_metadata.rds"))
```

### Reproducing the plot

We can now reproduce the plot using the code from exercise 1 using the data in `survival_ard` and `outputs`.

```{r}
#| label: get-data
analyses_metadata <- readRDS(file = here("data", "analyses_metadata.rds"))
survival_ard <- readRDS(file = here("data", "survival_ard.rds"))
outputs <- readRDS(file = here("data", "outputs.rds"))

sas_analysis <- analyses_metadata |> 
  filter(id == "A02") 

sas_output <- outputs |> 
  filter(id == sas_analysis$output_id)

sas_surv_ard <- survival_ard |> 
  filter(id == sas_analysis$ard_id)

```

```{r}
#| label: get-plot-metadata

title <- sas_output |>
  filter(type == "title")

xlab <- sas_output |>
  filter(type == "xlab")

ylab <- sas_output |>
  filter(type == "ylab")

legend <- sas_output |>
  filter(type == "legend")

legend_colors <- str_split(legend$color, pattern = ", ", simplify = T) |>
  str_split(pattern = " = ", simplify = T)

```

```{r}
#| label: get-plot
#| fig-height: 5
#| fig-width: 6
#| fig-align: center

widen_survival_ard <- sas_surv_ard |>
  pivot_wider(names_from = "name",
              values_from = "value",
              values_fn = list) |>
  unnest(cols = everything())

plot_original <-
  widen_survival_ard |>
  ggplot(aes(x = time, y = estimate, ymin = ci_lower, ymax = ci_upper)) +
  geom_step(aes(colour = strata)) +
  theme(
    legend.position = legend$location,
    legend.key = element_rect(fill = "white"),
    panel.background = element_rect(fill = "white"),
    panel.grid.major = element_line(
      linewidth = 0.3, linetype = "solid",
      colour = "grey"
    ),
    panel.grid.minor = element_line(
      linewidth = 0.1, linetype = "solid",
      colour = "grey"
    ),
    plot.title = element_text(face = title$weight),
    axis.title.y = element_text(face = ylab$weight),
    axis.title.x = element_text(face = xlab$weight)
  ) +
  expand_limits(x = 0, y = 0) +
  ylab(ylab$text) +
  xlab(xlab$text) +
  ggtitle(title$text) +
  guides(color = guide_legend(title = legend$text)) +
  scale_color_manual(
    limits = legend_colors[, 1],
    values = legend_colors[, 2]
  )

plot_original
```

#### Comparing plots

When looking at both plots, it seems there are differences in the curves. For example, between days 0-100.

::: {#fig-compare layout-ncol="2"}
![Kaplan-Meier plot using A01 (R) results data.](images/original_plot.png){#fig-r width="572"}

![Kaplan-Meier plot using A02 (SAS) results data.](images/original_plot_sas.png){#fig-sas width="591"}

Comparing the two plots.
:::

Unfortunately, we do not have enough information to find out why this difference occurs since the analysis metadata associated with the SAS results is incomplete.

Unfortunately, this is not clear from the data model. To spot this difference one would need to be familiar with both algorithms. Ideally, the data model would also capture this information. This means we need to redesign the analyses_metadata table.

* What do you think could be the reason(s) why both plots differ? [^Hint]

[^Hint]: Take another look at the [SAS documentation](https://documentation.sas.com/doc/en/statug/15.2/statug_lifetest_toc.htm). Did you notice that there are a number of options for calculating the survival probability. Do we know from the data set alone which estimator was chosen? Do we also know if the selected method corresponded to the intended analysis reported in the SAP? Do we also know if the implementation corresponds to the same implementation used within the {Survival} package? This raises important point about analysis reproducibility. You can find more about discrepancies between software in the [CAMIS website](https://psiaims.github.io/CAMIS/).

## Back to the drawing board

The robustness of a data model is the key to its adoption. Constructing a rigid 
structure is difficult but, if we think about the data model as modular we can
add new tables to store information that can not fit in the existing structure.
For example, by creating a new linked table with additional information that only applies to certain analyses. 

Take a few minutes to think and discuss about this problem: 

* What other information do you think it is relevant to keep about an analysis?

* What if you wanted to store results from other modalities such as imaging (e.g., x-rays)?


## Additional (take-home) tasks and questions

1.  You were just given another SAS dataset complementing the previous one (`survival_ard_part2.sas7bdat` in /data). This new dataset also includes the number at risk and number of events information. How would edit the `survival_ard` analysis A02 to add this information?

2.  Try to do the same exercise using a survival analysis output from another language you are familiar with. Are we missing important information?
